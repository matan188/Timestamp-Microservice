 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
});

// Intercept /favicon.ico request
app.get('/favicon.ico', function(req, res) {
  res.status(204);
});

app.get('/:date', function(req, res) {
  var input = decodeURI(req.params.date);
  var output = {};
  var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 
  'September', 'October', 'November', 'December'];
  var inputArray = input.split(' ');
  if (inputArray.length === 1) { // Epoch to Natural
    var epochString = inputArray[0];
    var epoch = new Date(Number(epochString) * 1000);
    if (isNaN(epoch)) {
      output = {natural: null, unix: null};
    } else {
      var year = epoch.getFullYear();
      var month = epoch.getMonth();
      var day = epoch.getDate();
      console.log(epoch, day, month, year);
      output.natural = `${months[month]} ${day}, ${year}`; 
      output.unix = parseInt(epochString);
    }
  } else if (inputArray.length === 3) { // Natural to Epoch
    var [month, day, year] = inputArray;
    day = day.split(',')[0];
    var date = new Date(parseInt(year), months.indexOf(month), parseInt(day));
    if (isNaN(date)) {
      output = {natural: null, unix: null};      
    } else {
      output.natural = `${month} ${day}, ${year}`;
      output.unix = date / 1000;
    }
  }
  res.send(output);
  res.end();
});

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
});

app.listen(3000, function () {
  console.log('Node.js listening ...');
});

